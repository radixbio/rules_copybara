diff --git BUILD BUILD
new file mode 100644
index 0000000..e22332a
--- /dev/null
+++ BUILD
@@ -0,0 +1,29 @@
+load("@io_bazel_rules_scala//scala:scala.bzl", "scala_binary", "scala_library", "scala_test")
+
+scala_library(
+    name = "scalaz3",
+    srcs = glob([
+        "src/main/java/**/*.java",
+        "src/main/scala/**/*.scala",
+    ]),
+    visibility = ["//visibility:public"],
+    resources = [
+       "//3rdparty/copybara/z3:libz3java_renamed",
+       "//3rdparty/copybara/z3:z3_shared_obj_fg"
+    ],
+    exports = [
+       "//3rdparty/copybara/z3:microsoft_z3_jar",
+    ],
+    deps = [
+       "//3rdparty/copybara/z3:microsoft_z3_jar",
+    ],
+)
+
+# Native Lib is required for using z3.scala
+scala_test(
+    name = "scalaz3-test",
+    srcs = glob([
+        "src/test/scala/**/*.scala",
+    ]),
+    deps = [":scalaz3", "//shared/shared_jvm:native-loader"],
+)
diff --git src/main/java/z3/Z3Wrapper.java src/main/java/z3/Z3Wrapper.java
index e0d8b98..4d460e8 100644
--- src/main/java/z3/Z3Wrapper.java
+++ src/main/java/z3/Z3Wrapper.java
@@ -22,51 +22,8 @@ import java.net.URL;
 /** This class contains all the native functions. It should be accessed
  * mostly through the other classes, though. */
 public final class Z3Wrapper {
-    // related to the path in the jar file
-    private static final String DS = java.io.File.separator;
-    private static final String PS = java.io.File.pathSeparator;
-
-    private static final String LIB_BIN = DS + "lib-bin" + DS;
-
-    private static final String LIB_NAME   = "scalaz3";
-    private static final String LIBZ3_NAME = "libz3";
-    private static final String Z3JAVA_NAME = "z3java";
-    private static final String LIBZ3JAVA_NAME = "libz3java";
-
     public static Object creation_lock = new Object();
 
-    private static final String versionString = LibraryChecksum.value;
-
-    private static final String isDebug = System.getProperty("scalaz3.debug.load");
-
-    // this is just to force class loading, and therefore library loading.
-    static {
-      if (!withinJar()) {
-        System.err.println("It seems you are not running ScalaZ3 from its JAR");
-        System.exit(1);
-      }
-
-      loadFromJar();
-      // We run this to ensure class loading of Native.
-      debug("Z3 version: " + z3VersionString());
-    }
-
-    private static void debug(String msg) {
-        if (isDebug != null) {
-          System.out.println(msg);
-        }
-    }
-
-    public static boolean withinJar() {
-       java.net.URL classJar  = Z3Wrapper.class.getResource("/lib-bin/");
-       return classJar != null;
-    }
-
-    public static String wrapperVersionString() {
-        // Version number should match smallest Z3 with which we know it to work, plus a letter for "internal" versions.
-        return "ScalaZ3 4.0.a (in dev.)";
-    }
-
     public static String z3VersionString() {
         Native.IntPtr major = new Native.IntPtr();
         Native.IntPtr minor = new Native.IntPtr();
@@ -76,87 +33,6 @@ public final class Z3Wrapper {
         return "Z3 " + major.value + "." + minor.value + " (build " + buildNumber.value + ", rev. " + revisionNumber.value + ")";
     }
 
-    private static void loadFromJar() {
-        String path = "SCALAZ3_" + versionString;
-        File libDir  = new File(System.getProperty("java.io.tmpdir") + DS + path + LIB_BIN);
-
-        String libRealName   = System.mapLibraryName(LIB_NAME);
-
-        try {
-          if (!libDir.isDirectory() || !libDir.canRead()) {
-            libDir.mkdirs();
-            extractFromJar(libDir);
-          }
-
-          addLibraryPath(libDir.getAbsolutePath());
-
-          String os = System.getProperty("os.name");
-          if (os != null && os.indexOf("Win") >= 0) {
-            // Under windows, we first load libz3 explicitly, on which ScalaZ3 depends
-            debug("Loading libz3");
-            try { System.loadLibrary(LIBZ3_NAME); }
-            catch (UnsatisfiedLinkError e) { debug("Failed to load " + LIBZ3_NAME); }
-
-            debug("Loading z3java");
-            try { System.loadLibrary(Z3JAVA_NAME); }
-            catch (UnsatisfiedLinkError e) { debug("Failed to load " + Z3JAVA_NAME); }
-
-            debug("Loading libz3java");
-            try { System.loadLibrary(LIBZ3JAVA_NAME); }
-            catch (UnsatisfiedLinkError e) { debug("Failed to load " + LIBZ3JAVA_NAME); }
-          }
-
-          debug("Loading "+LIB_NAME);
-          System.loadLibrary(LIB_NAME);
-        } catch (Exception e) {
-          System.err.println(e.getMessage());
-          e.printStackTrace();
-        }
-    }
-
-    public static void addLibraryPath(String pathToAdd) throws Exception {
-        System.setProperty("java.library.path", pathToAdd + PS + System.getProperty("java.library.path"));
-
-        // this forces JVM to reload "java.library.path" property
-        Field fieldSysPath = ClassLoader.class.getDeclaredField( "sys_paths" );
-        fieldSysPath.setAccessible( true );
-        fieldSysPath.set( null, null );
-    }
-
-
-    private static void extractFromJar(File toDir) throws Exception {
-        CodeSource src = Z3Wrapper.class.getProtectionDomain().getCodeSource();
-        if (src != null) {
-            URL jar = src.getLocation();
-            ZipInputStream zip = new ZipInputStream(jar.openStream());
-            while(true) {
-                ZipEntry e = zip.getNextEntry();
-                if (e == null) break;
-
-                String path = e.getName();
-
-                if (path.startsWith("lib-bin/") && !e.isDirectory()) {
-
-                    String name = new File(path).getName();
-
-                    debug("Extracting "+path+" from jar to "+name+ "...");
-
-                    File to = new File(toDir.getAbsolutePath() + DS + name);
-
-                    InputStream in   = Z3Wrapper.class.getResourceAsStream("/"+path);
-                    OutputStream out = new FileOutputStream(to);
-                    byte buf[] = new byte[4096];
-                    int len;
-                    while((len = in.read(buf)) > 0) {
-                        out.write(buf, 0, len);
-                    }
-                    out.close();
-                    in.close();
-                }
-            }
-        }
-
-    }
 
     public static long[] toPtrArray(Native.LongPtr[] ptrs) {
         long[] result = new long[ptrs.length];
diff --git src/main/scala/z3/scala/package.scala src/main/scala/z3/scala/package.scala
index f99ed0d..5f4bb7a 100644
--- src/main/scala/z3/scala/package.scala
+++ src/main/scala/z3/scala/package.scala
@@ -4,8 +4,6 @@ import com.microsoft.z3.Native
 import _root_.scala.language.implicitConversions
 
 package object scala {
-  // make sure Z3Wrapper has been loaded!
-  Z3Wrapper.withinJar()
 
   def toggleWarningMessages(enabled: Boolean) : Unit = {
     Native.toggleWarningMessages(enabled)
@@ -17,7 +15,7 @@ package object scala {
 
   /** A string representation of the version numbers for Z3, and the API (including bindings) */
   lazy val version : String = {
-    Z3Wrapper.z3VersionString() + ", " + Z3Wrapper.wrapperVersionString()
+    Z3Wrapper.z3VersionString()
   }
 
   protected[z3] def toPtrArray(ptrs : Iterable[Z3Pointer]) : Array[Long] = {
diff --git src/test/scala/z3/scala/ForComprehension.scala src/test/scala/z3/scala/ForComprehension.scala
index a9b9cbb..317da1a 100644
--- src/test/scala/z3/scala/ForComprehension.scala
+++ src/test/scala/z3/scala/ForComprehension.scala
@@ -1,8 +1,10 @@
 package z3.scala

-import org.scalatest.{FunSuite, Matchers}
+import org.scalatest.funsuite.AnyFunSuite
+import org.scalatest.matchers.should.Matchers
+import com.radix.shared.libtools.NativeLib

-class ForComprehension extends FunSuite with Matchers {
+class ForComprehension extends AnyFunSuite with Matchers {
   import dsl._

   def isPrime(i : Int) : Boolean = {
@@ -10,6 +12,7 @@ class ForComprehension extends FunSuite with Matchers {
   }

   test("ForComprehension") {
+    NativeLib.loadLibraries()
     val results = for(
       (x,y) <- findAll[Int,Int]((x: Val[Int], y: Val[Int]) => x > 0 && y > x && x * 2 + y * 3 <= 40);
       if(isPrime(y));



